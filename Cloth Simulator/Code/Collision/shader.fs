#version 330 corein vec3 Position;in vec3 Normal;in vec2 TexCoords;out vec4 FragColor;uniform sampler2D texMap;uniform vec3 lightPos;uniform vec3 viewPos;vec3 Blinn(vec3 normal, vec3 fragPos, vec3 lightColor) {    vec3 lightDir = normalize(lightPos - fragPos);    vec3 viewDir = normalize(viewPos - fragPos);    vec3 halfWay = normalize(lightDir + viewDir);        vec3 diffuse = max(dot(lightDir, normal), 0) * lightColor;    vec3 specular = pow(max(dot(halfWay, normal), 0), 64.0) * lightColor;        float dist = length(lightPos - fragPos);    float attenuation =  1.0 / dist;        diffuse *= attenuation;    specular *= attenuation;        return diffuse + specular;}void main(){    vec3 color = texture(texMap, TexCoords).rgb;    vec3 lighting = Blinn(normalize(Normal), Position, vec3(4.0f, 4.0f, 4.0f));    FragColor = vec4(color * lighting, 1.0f);}