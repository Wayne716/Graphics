#pragma once#include <vector>#include <unordered_set>#include <unordered_map>#include "mass.h"#include "spring.h"#include "mesh.h"#include "sphere.h"using namespace std;class Sphere;enum CLOTH_ORIENTATION {    HORIZONTAL = 0,    VERTICAL = 1};struct ClothParameters {    ClothParameters() = default;    ClothParameters(bool _structual, bool _shearing, bool _bending, float _damping, float _density, float _ks) : structual(_structual), shearing(_shearing), bending(_bending), damping(_damping), density(_density), ks(_ks) {};        bool structual, shearing, bending;    float damping, density, ks;};class Cloth {public:    Cloth() {}    ~Cloth();    Cloth(float w, float h, int pw, int ph, float t);        void simulate(float fps, float steps, ClothParameters* cp, std::vector<glm::vec3> ext, Sphere *s);    void buildGrid();    void buildMesh();    void buildBoxes();    void selfCollide(Mass& m, float steps);    float hashPosition(glm::vec3 pos);        public:    float width, height;    int pointsWidth, pointsHeight;    float thickness;    CLOTH_ORIENTATION orientation;        vector<Mass> masses;    vector<vector<int>> pinnedPoints;    vector<Spring> springs;    Mesh* mesh;    std::unordered_map<float, vector<Mass*>*> map;};